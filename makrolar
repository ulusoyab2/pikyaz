  variable  _forknt=0 
  variable  _nxtknt=0 
  variable  _rptknt=0 
  variable  _alwknt=0 
  variable  _untknt=0 
  variable  _seltot=0 
  variable  _selknt=0 
  variable  _castot=0 
  variable  _casknt=0 
  variable  _waitk=0 
  variable  _bitsay2=0 
eg  macro  addr   ; eşitse adrese git
    btfsc  STATUS,Z 
    goto  addr 
    endm 

bg  macro  addr   ; büyükse adrese git
    btfsc  STATUS,C 
    goto  addr 
    endm 

edg  macro  addr  ; eşit değilse adrese git
    btfss  STATUS,Z 
    goto  addr 
    endm 

bdg  macro  addr    ; büyük değilse adrese git 
    btfss  STATUS,C 
    goto  addr 
    endm 
    
tests macro prt,pin,btsy
    if (prt == 1 )  ; PORTA
        BTFSC PORTA,pin
         goto bitti2#v(btsy)
    endif
    if (prt == 2 )  ; PORTB
        BTFSC PORTB,pin
         goto bitti2#v(btsy)
    endif
    if (prt == 3 )  ; PORTC
        BTFSC PORTC,pin
         goto bitti2#v(btsy)
    endif
    endm
 ; PORTA            EQU  H'0F80'
testb macro prt,pin,btsy
    if (prt == 1 )  ; PORTA
        BTFSS PORTA,pin
         goto bitti2#v(btsy)
    endif
    if (prt == 2 )  ; PORTB
        BTFSS PORTB,pin
         goto bitti2#v(btsy)
    endif
    if (prt == 3 )  ; PORTC
        BTFSS PORTC,pin
         goto bitti2#v(btsy)
    endif
    endm
  
tstbson macro btsy
bitti2#v(btsy)
    endm
    
eger macro deg,isaret,sayi,btsy
    if (isaret == 60) ; küçük işareti
        movf deg,0
        sublw sayi
        btfss STATUS,C
        goto bitti#v(btsy)
    endif
    
    if (isaret == 61) ; eşit işareti
        movf deg,0
        sublw sayi
        btfss STATUS,Z
        goto bitti#v(btsy)
    endif
    if ( isaret == 62) ; büyük işareti
         movf deg,0
        sublw sayi
        btfsc STATUS,C
        goto bitti#v(btsy)
    endif
    if ( isaret == 33) ; ünlem(değil) işareti ab<> 4 
          movf deg,0
          sublw sayi
          btfsc STATUS,Z
          goto bitti#v(btsy)
    endif
    endm
egerson macro btsy
bitti#v(btsy)
    endm
    
for  macro  var,begl,endl 
      movlw  begl 
      movwf  var 
_for#v(_forknt) 
    movlw  endl 
    subwf  var,w 
    eg  _next#v(_forknt) 
_forknt  set  _forknt+1 
_nxtknt  set  _forknt 
    endm 
next  macro  var 
_nxtknt  set  _nxtknt-1 
    incf  var,f 
    goto  _for#v(_nxtknt) 
_next#v(_nxtknt) 
    endm 

forf  macro  var,begl,endf 
    movlw  begl 
    movwf  var 
_for#v(_forknt) 
    movf  var,w 
    subwf  endf 
    eg  _next#v(_forknt) 
_forknt  set  _forknt+1 
_nxtknt  set  _forknt 
    endm 

nextl  macro  var,incl 
_nxtknt  set  _nxtknt-1 
    movf  var,w 
    addlw  incl 
    movwf  var 
    goto  _for#v(_nxtknt) 
_next#v(_nxtknt) 
    endm 

nextf  macro  var,incf 
local _nxtknt
_nxtknt  set  _nxtknt-1 
    movf  var,w 
    addwf  incf,f 
    goto  _for#v(_nxtknt) 
_next#v(_nxtknt) 
    endm 
    
repeat  macro 
_rpt#v(_rptknt) 
_rptknt  set  _rptknt+1 
_alwknt  set  _rptknt 
_untknt  set  _rptknt 
    endm 
    
always  macro 
_alwknt  set  _alwknt-1 
    goto  _rpt#v(_alwknt) 
    endm 
    
untileq  macro 
_untknt  set  _untknt-1 
    edg  _rpt#v(_untknt) 
    endm 
    
untilne  macro 
_untknt  set  _untknt-1 
    eg  _rpt#v(_untknt) 
    endm 
    
select  macro 
_seltot  set  _seltot+1 
_selknt  set  _seltot 
    endm 
    
endselect  macro 
sel#v(_selknt) 
_selknt  set  _selknt-1 
    endm 
    
case  macro  lit 
_castot set  _castot+1 
_casknt  set  _castot 
    xorlw  lit 
    eg  cas#v(_casknt) 
    xorlw  lit 
    goto  ecas#v(_casknt) 
cas#v(_casknt) 
    xorlw  lit 
    endm 
    
casef  macro  var 
_castot set  _castot+1 
_casknt  set  _castot 
    xorwf  var,w 
    eg  cas#v(_casknt) 
    xorwf  var,w 
    goto  ecas#v(_casknt) 
cas#v(_casknt) 
    xorwf  var,w 
    endm 
    
endcase  macro 
    goto  sel#v(_selknt) 
ecas#v(_casknt) 
_casknt  set  _casknt-1 
    endm 
    
waitwhile  macro  addr,andl,xorl 
waitw#v(_waitk) 
    movf  addr,w 
    andlw  andl 
    if  xorl != 0 
    xorlw  xorl 
    endif 
    edg  waitw#v(_waitk) 
_waitk  set  _waitk+1 
    endm 
    
waituntil  macro  addr,andl,xorl 
waitw#v(_waitk) 
    movf  addr,w 
    andlw  andl 
    if  xorl != 0 
      xorlw  xorl 
    endif 
    eg  waitw#v(_waitk) 
_waitk  set  _waitk+1 
    endm 
    
bit168   macro  sayi,ustd,altd
  movlw LOW(sayi)
  movwf altd
  movlw HIGH(sayi)
  movwf ustd
  ENDM
  
bekle   macro par1    
local   Loop1,dechi,Delay1ms,Loop2,Endo
    movlw high par1   ; Higher byte of parameter 1 goes to __i
    movwf __i    
    movlw low par1   ; Lower byte of parameter 1 goes to __j
    movwf __j    
Loop1        
    movf __j, f   ; Decrease __i and __j necessary
    btfsc STATUS, Z   ; number of times and call subprogram Delay1ms
    goto dechi    
    call Delay1ms    
    decf __j, f    
    goto Loop1    
dechi        
    movf __i, f    
    btfsc STATUS, Z    
    goto Endo    
    call Delay1ms    
    decf __i, f    
    decf __j, f    
    goto Loop1    
Delay1ms:       ; Delay1ms produces a one milisecond delay
    movlw .250   ; 100*10us=1ms
    movwf __k   ; __k<-100
Loop2:        
    nop    
    nop    
    nop    
    nop    
    nop    
    nop    
    nop    
    decfsz __k, f    
    goto Loop2   ; Time period necessary to execute loop Loop2
    return   ; equals 10us
Endo        
    endm
    
movsd  macro  sayi,deg
    movlw sayi
    movwf deg
    endm
    
artir  macro deg
local aartir,bartir,cartir,cik
    incf deg,1
    eg aartir
    goto cik
aartir
    incf deg+1,1
    eg bartir
    goto cik
bartir
    incf deg+2,1
    eg cartir
    goto cik
cartir
    incf deg+3,1
cik
    endm
    
azalt  macro deg
local aazalt,bazalt,cazalt,cik2
    decf deg,1
    eg aazalt
    goto cik2
aazalt
    decf deg+1,1
    eg bazalt
    goto cik2
bazalt
    decf deg+2,1
    eg cazalt
    goto cik2
cazalt
    decf deg+3,1
cik2
    endm
    
kucukse   macro   deg1,deg2,btsy     ; deg1 <deg2 ise adrese git
    movlw deg1
    subwf  deg2,0
    btfsc STATUS,C
    goto bitti3#v(btsy)
    endm

kucukson  macro btsy
bitti3#v(btsy)
    endm 
   
buyukse   macro   deg1,deg2,btsy     ; deg1>deg2 ise adrese git 
    movlw deg2
    subwf  deg1,0
    btfsc STATUS,C
    goto bitti4#v(btsy)
    endm

buyukson  macro btsy
bitti4#v(btsy)
    endm

esitse    macro   deg1,deg2,adres     ;deg1=deg2 se adrese git   
        movf    deg1,w
        subwf   deg2,w
        btfsc   STATUS,Z
        goto bitti5#v(btsy)
        endm
        
esitson  macro btsy
bitti5#v(btsy)
    endm
    
MOVFW MACRO PVARIN 
    MOVF PVARIN,W 
    ENDM 
    
RLF MACRO PVARIN,PDESTINATION 
    RLCF PVARIN,PDESTINATION 
    ENDM 
    
RRF MACRO PVARIN,PDESTINATION 
    RRCF PVARIN,PDESTINATION 
    ENDM
    
    
epromyaz macro adres,veri
      movf   adres,0
      movwf  EEADR
      movf   veri
      movwf   EEDATA
      BCF       EECON1, EEPGD             ;SELECT EEPROM READ/WRITE
      BCF       EECON1, CFGS
      bsf         EECON1, WREN          ;Yazmayı etkinleştir.
      movlw     0x55                   ;Bu değerler EECON    ;kaydedicisine sıralı   ;yüklenmeli.
      movwf   EECON2
      movlw   0xAA
      movwf   EECON2
      bsf         EECON1, WR              ;Yaz komutu veriliyor.
      nop                             ;İşlemin tamamlanması için 2   ;komut çevrimi bekle.
      nop
      nop
      nop
      bcf         EECON1, WREN          ;Yazmayı pasif hale getir.       
      endm
    
    ; Flash program belleğinden 1 byte veri okuyan alt program.
    
epromoku  macro  adres ,degisken
      movf   adres,0
      movwf  EEADR
      BCF       EECON1, EEPGD               ; 
      BCF       EECON1, CFGS                ; Access program FLASH or Data EEPROM memory
      bsf         EECON1, RD                  ;Okumayı etkinleştir.
      nop                                 ;İşlemin tamamlanması için 2   ;komut çevrimi bekle.
      nop
      nop
      nop
      movff     EEDATA, degisken   
     endm                        ;Alt programdan çık.
     
bip macro port,pin ,sure
   clrf REGB3
    for REGB3,0,sure
    if (port == 65)  ; PORTA
      bsf LATA,pin  ; LATA,3
    endif
    if (port == 66)  ; PORTB
      bsf LATB,pin  ; LATB,3
    endif
    if (port == 67)  ; PORTA
      bsf LATC,pin  ; LATC,3
    endif
    bekle 10
     if (port == 65)  ; PORTA
      bcf LATA,pin  ; LATA,3
    endif
    if (port == 66)  ; PORTB
      bcf LATB,pin  ; LATB,3
    endif
    if (port == 67)  ; PORTA
      bcf LATC,pin  ; LATC,3
    endif
    bekle 10
    next REGB3
    endm